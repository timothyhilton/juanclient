package juan.modules.combat;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import org.lwjgl.input.Keyboard;

import juan.events.Event;
import juan.events.listeners.EventMotion;
import juan.modules.Module;
import juan.util.Timer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C02PacketUseEntity.Action;

public class KillAura extends Module {
	
	public Timer timer = new Timer();
	
	public KillAura() {
		super("KillAura", Keyboard.KEY_R, Category.COMBAT);
	}
	
	public void onEnable() {
		
	}
	
	public void onDisable(){
		
	}
	
	public void onEvent(Event e) {
		if(e instanceof EventMotion) {
			if(e.isPre()) {
				
				EventMotion event = (EventMotion)e;
				
				List<Entity> targets = mc.theWorld.loadedEntityList.stream().filter(EntityLivingBase.class::isInstance).collect(Collectors.toList());
				
				targets = targets.stream().filter(entity -> entity.getDistanceToEntity(mc.thePlayer) < 4 && entity != mc.thePlayer && !entity.isDead).collect(Collectors.toList());
				
				targets.sort(Comparator.comparingDouble(entity -> ((EntityLivingBase)entity).getDistanceToEntity(mc.thePlayer)));
				
				//targets = targets.stream().filter(EntityPlayer.class::isInstance).collect(Collectors.toList());
				
				if(!targets.isEmpty()) {
					EntityLivingBase target = (EntityLivingBase) targets.get(0);
					
					float[] rotations = getRotations(target);
					mc.thePlayer.rotationYaw = rotations[0];
					mc.thePlayer.rotationPitch = rotations[1];
					
					if(timer.hasTimeElapsed(1000 / 10, true)) {
						mc.thePlayer.swingItem();
						mc.thePlayer.sendQueue.addToSendQueue(new C02PacketUseEntity(target, Action.ATTACK));
					}
				}
				
			}
		}
	}
	
	public float[] getRotations(Entity e) {
		double deltaX = e.posX - mc.thePlayer.posX;
		double deltaY = (e.posY + e.getEyeHeight()) - (mc.thePlayer.posY + mc.thePlayer.getEyeHeight());
		double deltaZ = e.posZ - mc.thePlayer.posZ;
		double distance = Math.sqrt(deltaX * deltaX + deltaZ * deltaZ);
		
		float yaw = (float) Math.toDegrees(Math.atan2(deltaZ, deltaX)) - 90.0F;
		float pitch = (float) -Math.toDegrees(Math.atan2(deltaY, distance));
		
		return new float[] { yaw, pitch };
	}
	
}
